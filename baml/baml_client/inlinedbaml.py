# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

_file_map = {

    "mahjong.baml": "// BAML型定義: 麻雀の手牌構造\n\n// 自動生成ファイルの出力先設定\ngenerator baml_client {\n  output_type \"python/pydantic\"\n  output_dir \"../baml\"\n  version \"0.211.2\"\n}\n\n// 牌の種類を列挙型で定義\nenum TileType {\n  // 萬子（マンズ）\n  ONE_M @alias(\"1m\")\n  TWO_M @alias(\"2m\")\n  THREE_M @alias(\"3m\")\n  FOUR_M @alias(\"4m\")\n  FIVE_M @alias(\"5m\")\n  SIX_M @alias(\"6m\")\n  SEVEN_M @alias(\"7m\")\n  EIGHT_M @alias(\"8m\")\n  NINE_M @alias(\"9m\")\n\n  // 筒子（ピンズ）\n  ONE_P @alias(\"1p\")\n  TWO_P @alias(\"2p\")\n  THREE_P @alias(\"3p\")\n  FOUR_P @alias(\"4p\")\n  FIVE_P @alias(\"5p\")\n  SIX_P @alias(\"6p\")\n  SEVEN_P @alias(\"7p\")\n  EIGHT_P @alias(\"8p\")\n  NINE_P @alias(\"9p\")\n\n  // 索子（ソーズ）\n  ONE_S @alias(\"1s\")\n  TWO_S @alias(\"2s\")\n  THREE_S @alias(\"3s\")\n  FOUR_S @alias(\"4s\")\n  FIVE_S @alias(\"5s\")\n  SIX_S @alias(\"6s\")\n  SEVEN_S @alias(\"7s\")\n  EIGHT_S @alias(\"8s\")\n  NINE_S @alias(\"9s\")\n\n  // 字牌\n  EAST @alias(\"1z\")   // 東\n  SOUTH @alias(\"2z\")  // 南\n  WEST @alias(\"3z\")   // 西\n  NORTH @alias(\"4z\")  // 北\n  WHITE @alias(\"5z\")  // 白\n  GREEN @alias(\"6z\")  // 発\n  RED @alias(\"7z\")    // 中\n}\n\n// 風牌の種類\nenum WindType {\n  EAST @alias(\"east\")\n  SOUTH @alias(\"south\")\n  WEST @alias(\"west\")\n  NORTH @alias(\"north\")\n}\n\n// 鳴き(メンツ)の情報\nclass MeldInfo {\n  tiles string[] @description(\"鳴いた牌のリスト (例: ['1m', '2m', '3m'])\")\n  is_open bool @description(\"true: 鳴き(ポン/チー/明カン), false: 暗カン\")\n}\n\n// 麻雀の手牌情報\nclass Hand {\n  tiles string[] @description(\"手牌の牌リスト。和了牌(win_tile)を含む14枚。鳴いた牌は含めない。形式: '1m', '2p', '3s', '1z'など\") @assert(min_tiles, {{ this|length >= 14 }})\n  melds MeldInfo[] | null @description(\"鳴いた牌のリスト。ポン/チー/カンがある場合に設定。ない場合はnull\")\n  win_tile string @description(\"アガリ牌。tilesにも含まれている必要がある (例: '1m')\")\n  dora_indicators string[] | null @description(\"ドラ表示牌のリスト\")\n  // 状況フラグ(デフォルト: false)\n  is_riichi bool @description(\"リーチをかけているか\")\n  is_tsumo bool @description(\"ツモアガリか(falseの場合はロン)\")\n  is_ippatsu bool @description(\"一発か\")\n  is_rinshan bool @description(\"嶺上開花か\")\n  is_chankan bool @description(\"槍槓か\")\n  is_haitei bool @description(\"海底摸月か\")\n  is_houtei bool @description(\"河底撈魚か\")\n  is_daburu_riichi bool @description(\"ダブルリーチか\")\n  is_nagashi_mangan bool @description(\"流し満貫か\")\n  is_tenhou bool @description(\"天和か\")\n  is_chiihou bool @description(\"地和か\")\n  is_renhou bool @description(\"人和か\")\n  is_open_riichi bool @description(\"オープンリーチか\")\n  player_wind string | null @description(\"自風: 'east'(東家), 'south'(南家), 'west'(西家), 'north'(北家)\")\n  round_wind string | null @description(\"場風: 'east'(東場), 'south'(南場), 'west'(西場), 'north'(北場)\")\n  paarenchan int @description(\"本場数\")\n  kyoutaku_number int @description(\"供託本数\")\n  tsumi_number int @description(\"積み棒の数\")\n}\n\n// OpenAI GPTクライアント設定\nclient<llm> GPT4oMini {\n  provider openai\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\n// JSON文字列を確実にHand型に変換する関数\nfunction ParseHandFromJSON(json_string: string) -> Hand {\n  client GPT4oMini\n  prompt #\"\n    以下のJSON文字列をHand型のオブジェクトに変換してください。\n    不足しているフィールドはデフォルト値で埋めてください。\n\n    入力JSON:\n    {{ json_string }}\n\n    出力に含める必須フィールド:\n    - tiles: 牌の配列。和了牌(win_tile)を含む14枚。\n    - melds: nullまたはMeldInfoの配列\n    - win_tile: アガリ牌。tilesの中にも必ず含まれている必要がある。\n    - dora_indicators: nullまたはドラ表示牌の配列\n    - is_riichi, is_tsumo, is_ippatsu, is_rinshan, is_chankan, is_haitei, is_houtei, is_daburu_riichi, is_nagashi_mangan, is_tenhou, is_chiihou, is_renhou, is_open_riichi: boolean型 (デフォルト: false)\n    - player_wind, round_wind: nullまたは文字列 (east/south/west/north)\n    - paarenchan, kyoutaku_number, tsumi_number: 整数 (デフォルト: 0)\n\n    重要: win_tileはtilesの中に必ず存在する必要があります。\n\n    Hand型に適合する有効なJSONオブジェクトとして出力してください。\n    コメントや説明文は含めないでください。\n    JSONオブジェクトのみを出力してください。\n  \"#\n}\n\n// 自然言語の問題文から手牌データを構造化抽出する関数\nfunction ExtractHandFromQuestion(question: string) -> Hand {\n  client GPT4oMini\n  prompt #\"\n    以下の日本語の麻雀問題文から手牌情報を抽出し、完全なJSONオブジェクトとして出力してください。\n\n    問題文:\n    {{ question }}\n\n    出力形式(全てのフィールドを含めること):\n    {\n      \"tiles\": [...],  // 問題文から抽出した手牌。和了牌を含む14枚。鳴いた牌は含めない。\n      \"melds\": null,  // 鳴き情報。ポン/チー/カンがある場合は配列で設定\n      \"win_tile\": \"...\",  // アガリ牌。tilesの中にも必ず含まれている必要がある。\n      \"dora_indicators\": null,  // ドラ表示牌がある場合は配列で設定\n      \"is_riichi\": false,  // リーチが言及されていればtrue\n      \"is_tsumo\": false,  // ツモ/自摸ならtrue、ロンならfalse\n      \"is_ippatsu\": false,  // 一発が言及されていない限りfalse\n      \"is_rinshan\": false,  // 嶺上開花が言及されていない限りfalse\n      \"is_chankan\": false,  // 槍槓が言及されていない限りfalse\n      \"is_haitei\": false,  // 海底摸月が言及されていない限りfalse\n      \"is_houtei\": false,  // 河底撈魚が言及されていない限りfalse\n      \"is_daburu_riichi\": false,  // ダブルリーチが言及されていない限りfalse\n      \"is_nagashi_mangan\": false,  // 流し満貫が言及されていない限りfalse\n      \"is_tenhou\": false,  // 天和が言及されていない限りfalse\n      \"is_chiihou\": false,  // 地和が言及されていない限りfalse\n      \"is_renhou\": false,  // 人和が言及されていない限りfalse\n      \"is_open_riichi\": false,  // オープンリーチが言及されていない限りfalse\n      \"player_wind\": null,  // 東家なら\"east\", 南家なら\"south\", 西家なら\"west\", 北家なら\"north\"\n      \"round_wind\": null,  // 東場なら\"east\", 南場なら\"south\", 西場なら\"west\", 北場なら\"north\"\n      \"paarenchan\": 0,  // \"X本場\"から抽出\n      \"kyoutaku_number\": 0,  // 供託本数(言及されていない限り0)\n      \"tsumi_number\": 0  // 積み棒の数(言及されていない限り0)\n    }\n\n    tilesとwin_tileの関係について重要な注意事項:\n    - tilesは和了牌(win_tile)を含む14枚である必要があります\n    - win_tileはtilesの中に必ず存在する必要があります\n\n    和了形のパターン:\n    1. 通常の和了形（4面子1雀頭）:\n       例: 手牌「1m, 2m, 3m, 4m, 5m, 6m, 7m, 8m, 9m, 1p, 1p, 1p, 1s」で和了牌「1s」\n       → tiles: [\"1m\", \"2m\", \"3m\", \"4m\", \"5m\", \"6m\", \"7m\", \"8m\", \"9m\", \"1p\", \"1p\", \"1p\", \"1s\", \"1s\"]\n       → win_tile: \"1s\"\n\n    2. 七対子（7組の対子）:\n       例: 手牌「1m, 1m, 2m, 2m, 3m, 3m, 4m, 4m, 5m, 5m, 6m, 6m, 7m」で和了牌「7m」\n       → tiles: [\"1m\", \"1m\", \"2m\", \"2m\", \"3m\", \"3m\", \"4m\", \"4m\", \"5m\", \"5m\", \"6m\", \"6m\", \"7m\", \"7m\"]\n       → win_tile: \"7m\"\n\n    3. 国士無双（13種の么九牌+1枚）:\n       例: 手牌「1m, 9m, 1p, 9p, 1s, 9s, 1z, 2z, 3z, 4z, 5z, 6z, 7z」で和了牌「1m」\n       → tiles: [\"1m\", \"9m\", \"1p\", \"9p\", \"1s\", \"9s\", \"1z\", \"2z\", \"3z\", \"4z\", \"5z\", \"6z\", \"7z\", \"1m\"]\n       → win_tile: \"1m\"\n\n    どのパターンでも、win_tileは必ずtilesに含まれている必要があります。\n\n    鳴き(melds)について重要な注意事項:\n    - ポン、チー、カン(明カン/暗カン)が問題文に言及されている場合、必ずmeldsフィールドに配列として設定してください\n    - 各鳴きは MeldInfo オブジェクトとして以下の形式で記述:\n      * \"tiles\": 鳴いた牌のリスト (例: ポンなら[\"1m\", \"1m\", \"1m\"]、チーなら[\"1m\", \"2m\", \"3m\"])\n      * \"is_open\": ポン/チー/明カンの場合はtrue、暗カンの場合はfalse\n    - 例1: \"1mをポン\"の場合 → \"melds\": [{\"tiles\": [\"1m\", \"1m\", \"1m\"], \"is_open\": true}]\n    - 例2: \"2pをチー、5sをポン\"の場合 → \"melds\": [{\"tiles\": [\"2p\", \"3p\", \"4p\"], \"is_open\": true}, {\"tiles\": [\"5s\", \"5s\", \"5s\"], \"is_open\": true}]\n    - 鳴きがない場合のみ null を設定\n\n    重要:\n    - 全てのフィールドを出力に含めること\n    - 言及されていないフィールドはデフォルト値を設定 (boolはfalse, intは0, オプショナルはnull)\n    - JSONオブジェクトのみを出力し、説明文は含めないこと\n  \"#\n}\n",
}

def get_baml_files():
    return _file_map