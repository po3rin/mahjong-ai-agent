# ----------------------------------------------------------------------------
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
# ----------------------------------------------------------------------------

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code using: baml-cli generate
# baml-cli is available with the baml package.

import typing
import typing_extensions
from enum import Enum


from pydantic import BaseModel, ConfigDict


import baml_py

CheckT = typing_extensions.TypeVar('CheckT')
CheckName = typing_extensions.TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, typing.Generic[CheckT, CheckName]):
    value: CheckT
    checks: typing.Dict[CheckName, Check]

def get_checks(checks: typing.Dict[CheckName, Check]) -> typing.List[Check]:
    return list(checks.values())

def all_succeeded(checks: typing.Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))
# #########################################################################
# Generated enums (2)
# #########################################################################

class TileType(str, Enum):
    ONE_M = "ONE_M"
    TWO_M = "TWO_M"
    THREE_M = "THREE_M"
    FOUR_M = "FOUR_M"
    FIVE_M = "FIVE_M"
    SIX_M = "SIX_M"
    SEVEN_M = "SEVEN_M"
    EIGHT_M = "EIGHT_M"
    NINE_M = "NINE_M"
    ONE_P = "ONE_P"
    TWO_P = "TWO_P"
    THREE_P = "THREE_P"
    FOUR_P = "FOUR_P"
    FIVE_P = "FIVE_P"
    SIX_P = "SIX_P"
    SEVEN_P = "SEVEN_P"
    EIGHT_P = "EIGHT_P"
    NINE_P = "NINE_P"
    ONE_S = "ONE_S"
    TWO_S = "TWO_S"
    THREE_S = "THREE_S"
    FOUR_S = "FOUR_S"
    FIVE_S = "FIVE_S"
    SIX_S = "SIX_S"
    SEVEN_S = "SEVEN_S"
    EIGHT_S = "EIGHT_S"
    NINE_S = "NINE_S"
    EAST = "EAST"
    SOUTH = "SOUTH"
    WEST = "WEST"
    NORTH = "NORTH"
    WHITE = "WHITE"
    GREEN = "GREEN"
    RED = "RED"

class WindType(str, Enum):
    EAST = "EAST"
    SOUTH = "SOUTH"
    WEST = "WEST"
    NORTH = "NORTH"

# #########################################################################
# Generated classes (2)
# #########################################################################

class Hand(BaseModel):
    tiles: typing.List[str]
    melds: typing.Optional[typing.List["MeldInfo"]] = None
    win_tile: str
    dora_indicators: typing.Optional[typing.List[str]] = None
    is_riichi: bool
    is_tsumo: bool
    is_ippatsu: bool
    is_rinshan: bool
    is_chankan: bool
    is_haitei: bool
    is_houtei: bool
    is_daburu_riichi: bool
    is_nagashi_mangan: bool
    is_tenhou: bool
    is_chiihou: bool
    is_renhou: bool
    is_open_riichi: bool
    player_wind: typing.Optional[str] = None
    round_wind: typing.Optional[str] = None
    paarenchan: int
    kyoutaku_number: int
    tsumi_number: int

class MeldInfo(BaseModel):
    tiles: typing.List[str]
    is_open: bool

# #########################################################################
# Generated type aliases (0)
# #########################################################################
